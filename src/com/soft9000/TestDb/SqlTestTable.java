/* THIS CLASS WAS GENERATED BY SQLMate .03
   The targeted SQL technology is SQLite3.
   Test case main.java documents tested level of support.
   Your project will need to include sqlite-jdbc.jar:
   -We used sqlite-jdbc-3.8.11.2.jar
 */
package com.soft9000.TestDb;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.sql.DriverManager;
import com.soft9000.SQLMate.EColumnType;
import com.soft9000.SQLMate.SqlColumn;

public class SqlTestTable {

    public static final int NO_ID = -1;

    public static String CONN_STRING = "jdbc:sqlite:com/soft9000/TestDb";

    public static Connection Connect() throws ClassNotFoundException, SQLException {
        return Connect(CONN_STRING);
    }

    public static Connection Connect(String fileName) throws ClassNotFoundException, SQLException {
        if (fileName == null) {
            throw new SQLException("File name cannot be NULL.");
        }

        Class.forName("org.sqlite.JDBC");
        Connection conn = DriverManager.getConnection(fileName);
        return conn;
    }

    public static void Cleanup(Connection conn) throws SQLException {
        if (conn == null) {
            throw new SQLException("Connection Object Reference is NULL.");
        }

        Statement ref = conn.createStatement();
        ref.execute("VACUUM");
        ref.close();
    }

    int ID = NO_ID;
    String Name = "";
    byte[] Big = new byte[0];

    public int getID() {
        return this.ID;
    }

    public String getName() {
        return this.Name;
    }

    public byte[] getBig() {
        return this.Big;
    }

    public boolean setID(int param) {
        this.ID = param;
        return true;
    }

    public boolean setName(String param) {
        if (param == null) {
            return false;
        }
        this.Name = param;
        return true;
    }

    public boolean setBig(byte[] param) {
        if (param == null) {
            return false;
        }
        this.Big = param;
        return true;
    }

    public boolean insert(Connection conn) throws SQLException {
        if (conn == null) {
            throw new SQLException("Connection Object Reference is NULL.");
        }

        PreparedStatement ref = conn.prepareStatement("INSERT INTO TestTable (Name, Big ) VALUES (?, ?) ;");
        ref.setString(1, this.getName());
        ref.setBytes(2, this.getBig());
        int result = ref.executeUpdate();
        ref.close();
        return (result == 1);
    }

    public List<SqlTestTable> select(Connection conn, String sqlSelect) throws SQLException {
        if (conn == null) {
            throw new SQLException("Connection Object Reference is NULL.");
        }

        Statement smt = conn.createStatement();
        ResultSet set = smt.executeQuery(sqlSelect);
        ArrayList<SqlTestTable> result = new ArrayList<SqlTestTable>();
        while (set.next()) {
            SqlTestTable ref = new SqlTestTable();
            ref.setID(set.getInt("ID"));
            ref.setName(set.getString("Name"));
            ref.setBig(set.getBytes("Big"));
            result.add(ref);
        }

        return result;
    }

    public boolean update(Connection conn) throws SQLException {
        if (conn == null) {
            throw new SQLException("Connection Object Reference is NULL.");
        }

        PreparedStatement ref = conn.prepareStatement("UPDATE TestTable SET Name = ?, Big = ? WHERE ID = ? ;");
        ref.setString(1, this.getName());
        ref.setBytes(2, this.getBig());
        ref.setInt(3, this.getID());
        int result = ref.executeUpdate();
        ref.close();
        return (result == 1);
    }

    public boolean delete(Connection conn) throws SQLException {
        if (conn == null) {
            throw new SQLException("Connection Object Reference is NULL.");
        }

        if (this.getID() == NO_ID) {
            throw new SQLException("Connection Object Reference is NULL.");
        }

        Statement ref = conn.createStatement();
        int result = ref.executeUpdate("DELETE FROM TestTable WHERE ID = " + this.getID() + " ;");
        ref.close();
        return (result == 1);
    }

    public void createTable(Connection conn) throws SQLException {
        if (conn == null) {
            throw new SQLException("Connection Object Reference is NULL.");
        }

        Statement ref = conn.createStatement();
        String sql = "CREATE TABLE IF NOT EXISTS TestTable (ID Integer PRIMARY KEY AUTOINCREMENT, Name Text, Big Blob) ;";
        ref.execute(sql);
        ref.close();
    }

    public void deleteTable(Connection conn) throws SQLException {
        if (conn == null) {
            throw new SQLException("Connection Object Reference is NULL.");
        }

        Statement ref = conn.createStatement();
        String sql = "DROP TABLE IF EXISTS TestTable ;";
        ref.execute(sql);
        ref.close();
    }

    public static List<SqlColumn> GetFieldInfo() {
        List<SqlColumn> result = new ArrayList<SqlColumn>();
        result.add(new SqlColumn("ID", EColumnType.Integer));
        result.add(new SqlColumn("Name", EColumnType.Text));
        result.add(new SqlColumn("Big", EColumnType.Blob));
        return result;
    }

    public static void main(String... args) throws ClassNotFoundException, SQLException {
        Connection conn = Connect("jdbc:sqlite:~test.tmp");
        SqlTestTable ref = new SqlTestTable();

// TEST TABLE OPS:
        ref.deleteTable(conn);
        ref.createTable(conn);

// TEST INSERT:
        ref.setID(1);
        ref.setName("data2");
        ref.setBig(new byte[0]);
        if (ref.getID() != 1) {
            throw new SQLException("Test Case 'checker 1.1' Error");
        }

        if (ref.getName().equals("data2") == false) {
            throw new SQLException("Test Case 'checker 1.2' Error");
        }

// BLOB: Run-time okay - test case scheduled for another release.
        if (ref.insert(conn) == false) {
            throw new SQLException("Test Case 'insert' Error");
        }

// TEST SELECT:
        List<SqlTestTable> zlist;
        zlist = ref.select(conn, "SELECT * FROM TestTable ;");
        if (zlist.isEmpty()) {
            throw new SQLException("Test Case 'select 1' Error");
        }

        ref = zlist.get(0);
        if (ref.getName().equals("data2") == false) {
            throw new SQLException("Test Case 'checker 1.2' Error");
        }

// BLOB: Run-time okay - test case scheduled for another release.
// TEST UPDATE:
        ref.setName("data12");
        ref.setBig(new byte[0]);
        if (ref.update(conn) == false) {
            throw new SQLException("Test Case 'update 1' Error");
        }

        if (ref.getName().equals("data12") == false) {
            throw new SQLException("Test Case 'checker 1.12' Error");
        }

// BLOB: Run-time okay - test case scheduled for another release.
// TEST DELETE:
        if (ref.delete(conn) == false) {
            throw new SQLException("Test Case 'delete' Error");
        }

        ref.deleteTable(conn);
    }

}
